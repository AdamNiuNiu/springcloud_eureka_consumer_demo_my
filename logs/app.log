2020-07-07 16:47:39.972|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-07 16:47:41.527|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=46236b96-26ae-32e0-a8db-550b36ba29ee
2020-07-07 16:47:42.496|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 50103 (http)
2020-07-07 16:47:42.557|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-50103"]
2020-07-07 16:47:42.558|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-07 16:47:42.558|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-07 16:47:42.988|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-07 16:47:42.988|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 2987 ms
2020-07-07 16:47:43.402|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-07 16:47:43.426|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 16:47:43.426|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 16:47:43.432|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 16:47:43.432|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 16:47:43.597|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-07 16:47:47.415|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-07 16:47:47.699|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-07 16:47:47.771|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-07 16:47:49.065|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-07 16:47:49.065|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-07 16:47:49.330|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-07 16:47:49.330|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-07 16:47:49.928|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 16:47:50.968|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-07 16:47:50.968|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-07 16:47:50.969|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-07 16:47:50.969|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-07 16:47:50.969|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-07 16:47:50.969|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-07 16:47:50.970|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-07 16:47:51.455|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-07 16:47:51.466|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-07 16:47:51.472|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-07 16:47:51.487|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594111671483 with initial instances count: 1
2020-07-07 16:47:51.499|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-07 16:47:51.500|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594111671500, current=UP, previous=STARTING]
2020-07-07 16:47:51.507|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 16:47:51.510|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-50103"]
2020-07-07 16:47:51.599|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 50103 (http) with context path ''
2020-07-07 16:47:51.601|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 50103
2020-07-07 16:47:51.605|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 16:47:54.458|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-07 16:47:54.505|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-07 16:47:54.588|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-07 16:47:54.651|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 19.325 seconds (JVM running for 24.672)
2020-07-07 16:52:50.976|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 16:57:50.978|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 16:59:03.278|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-07 16:59:03.279|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594112343278, current=DOWN, previous=UP]
2020-07-07 16:59:03.279|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 16:59:03.286|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 16:59:04.056|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-07 16:59:04.061|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-07 16:59:07.063|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-07 16:59:07.073|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-07 16:59:07.085|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-07 17:37:52.477|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-07 17:37:54.188|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=07ba6210-e5ed-3330-beb1-9cd1a8051698
2020-07-07 17:37:54.877|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-07 17:37:54.909|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-07 17:37:54.909|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-07 17:37:54.910|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-07 17:37:55.366|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-07 17:37:55.366|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 2865 ms
2020-07-07 17:37:56.787|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-07 17:37:56.813|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 17:37:56.813|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 17:37:56.821|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 17:37:56.821|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 17:37:56.963|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-07 17:37:59.910|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-07 17:38:00.075|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-07 17:38:00.121|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-07 17:38:00.217|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-07 17:38:00.217|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-07 17:38:00.421|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-07 17:38:00.422|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-07 17:38:00.782|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 17:38:01.532|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-07 17:38:01.532|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-07 17:38:01.532|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-07 17:38:01.532|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-07 17:38:01.532|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-07 17:38:01.532|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-07 17:38:01.533|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-07 17:38:01.825|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-07 17:38:01.833|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-07 17:38:01.838|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-07 17:38:01.846|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594114681843 with initial instances count: 2
2020-07-07 17:38:01.847|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-07 17:38:01.848|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594114681848, current=UP, previous=STARTING]
2020-07-07 17:38:01.851|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-07 17:38:01.851|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 17:38:01.904|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-07 17:38:01.905|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-07 17:38:01.916|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 17:38:03.126|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-07 17:38:03.146|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-07 17:38:03.203|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-07 17:38:03.332|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 14.514 seconds (JVM running for 18.099)
2020-07-07 17:38:44.831|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-07 17:38:44.832|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-07 17:38:44.846|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 14 ms
2020-07-07 17:39:11.356|INFO |http-nio-31003-exec-6|http-nio-31003-exec-6|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 17:39:11.505|INFO |http-nio-31003-exec-6|http-nio-31003-exec-6|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-07 17:39:11.511|INFO |http-nio-31003-exec-6|http-nio-31003-exec-6|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-07 17:39:11.576|INFO |http-nio-31003-exec-6|http-nio-31003-exec-6|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-07 17:39:11.727|INFO |http-nio-31003-exec-6|http-nio-31003-exec-6|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 17:39:11.744|INFO |http-nio-31003-exec-6|http-nio-31003-exec-6|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002, 127.0.0.1:31001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:127.0.0.1:31001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@b87638e
2020-07-07 17:39:12.602|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 17:43:01.546|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 18:42:34.606|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 18:42:34.639|INFO |DiscoveryClient-HeartbeatExecutor-0|DiscoveryClient-HeartbeatExecutor-0|com.netflix.discovery.DiscoveryClient.renew() 878|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - Re-registering apps/EUREKA-CONSUMER-DEMO-MY
2020-07-07 18:42:34.639|INFO |DiscoveryClient-HeartbeatExecutor-0|DiscoveryClient-HeartbeatExecutor-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 18:42:34.655|INFO |DiscoveryClient-HeartbeatExecutor-0|DiscoveryClient-HeartbeatExecutor-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 18:47:34.608|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 18:56:21.357|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 18:56:21.847|INFO |DiscoveryClient-HeartbeatExecutor-0|DiscoveryClient-HeartbeatExecutor-0|com.netflix.discovery.DiscoveryClient.renew() 878|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - Re-registering apps/EUREKA-CONSUMER-DEMO-MY
2020-07-07 18:56:21.847|INFO |DiscoveryClient-HeartbeatExecutor-0|DiscoveryClient-HeartbeatExecutor-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 18:56:21.858|INFO |DiscoveryClient-HeartbeatExecutor-0|DiscoveryClient-HeartbeatExecutor-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 18:57:30.504|INFO |Thread-256|Thread-256|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-07 18:57:30.505|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-07 18:57:30.506|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594119450506, current=DOWN, previous=UP]
2020-07-07 18:57:30.506|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 18:57:30.515|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 18:57:31.359|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-07 18:57:31.359|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-07 18:57:31.366|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-07 18:57:31.369|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-07 18:57:34.377|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-07 18:57:34.385|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-07 18:57:34.405|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-07 19:26:39.528|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-07 19:26:41.095|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=952c617e-a053-3bdf-ae4b-784e366442c4
2020-07-07 19:26:43.173|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-07 19:26:44.126|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-07 19:26:44.176|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-07 19:26:44.177|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-07 19:26:44.177|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-07 19:26:44.590|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-07 19:26:44.590|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 5032 ms
2020-07-07 19:26:47.119|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-07 19:26:47.176|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 19:26:47.176|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 19:26:47.192|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 19:26:47.192|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 19:26:47.412|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-07 19:26:49.923|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-07 19:26:50.179|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-07 19:26:50.289|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-07 19:26:50.511|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-07 19:26:50.511|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-07 19:26:51.005|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-07 19:26:51.005|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-07 19:26:51.566|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 19:26:52.411|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-07 19:26:52.411|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-07 19:26:52.412|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-07 19:26:52.412|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-07 19:26:52.412|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-07 19:26:52.412|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-07 19:26:52.412|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-07 19:26:53.036|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-07 19:26:53.046|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-07 19:26:53.053|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-07 19:26:53.064|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594121213057 with initial instances count: 1
2020-07-07 19:26:53.065|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-07 19:26:53.066|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594121213066, current=UP, previous=STARTING]
2020-07-07 19:26:53.071|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 19:26:53.073|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-07 19:26:53.181|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 19:26:53.190|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-07 19:26:53.193|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-07 19:26:54.333|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-07 19:26:54.381|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-07 19:26:54.496|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-07 19:26:54.750|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 18.847 seconds (JVM running for 22.369)
2020-07-07 19:27:05.468|INFO |http-nio-31003-exec-2|http-nio-31003-exec-2|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-07 19:27:05.468|INFO |http-nio-31003-exec-2|http-nio-31003-exec-2|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-07 19:27:05.487|INFO |http-nio-31003-exec-2|http-nio-31003-exec-2|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 19 ms
2020-07-07 19:27:28.014|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 19:27:28.173|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-07 19:27:28.178|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-07 19:27:28.238|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-07 19:27:28.386|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 19:27:28.398|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@81e21f7
2020-07-07 19:27:29.261|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 19:29:32.767|INFO |Thread-281|Thread-281|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-07 19:29:32.768|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-07 19:29:32.768|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594121372768, current=DOWN, previous=UP]
2020-07-07 19:29:32.768|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 19:29:32.775|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 19:29:33.661|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-07 19:29:33.663|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-07 19:29:33.663|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-07 19:29:33.672|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-07 19:29:36.675|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-07 19:29:36.681|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-07 19:29:36.693|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-07 19:40:42.470|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-07 19:40:45.634|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=952c617e-a053-3bdf-ae4b-784e366442c4
2020-07-07 19:40:45.852|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-07 19:40:46.677|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-07 19:40:46.718|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-07 19:40:46.719|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-07 19:40:46.720|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-07 19:40:47.340|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-07 19:40:47.341|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 4822 ms
2020-07-07 19:40:49.309|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-07 19:40:49.342|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 19:40:49.343|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 19:40:49.357|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 19:40:49.358|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 19:40:49.718|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-07 19:40:52.441|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-07 19:40:52.595|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-07 19:40:52.658|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-07 19:40:52.751|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-07 19:40:52.751|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-07 19:40:52.925|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-07 19:40:52.926|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-07 19:40:53.222|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 19:40:53.980|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-07 19:40:53.980|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-07 19:40:53.980|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-07 19:40:53.980|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-07 19:40:53.981|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-07 19:40:53.981|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-07 19:40:53.981|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-07 19:40:54.336|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-07 19:40:54.341|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-07 19:40:54.345|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-07 19:40:54.351|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594122054349 with initial instances count: 1
2020-07-07 19:40:54.353|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-07 19:40:54.354|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594122054354, current=UP, previous=STARTING]
2020-07-07 19:40:54.358|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 19:40:54.358|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-07 19:40:54.430|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-07 19:40:54.435|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-07 19:40:54.437|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 19:40:55.804|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-07 19:40:55.837|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-07 19:40:55.911|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-07 19:40:56.032|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 19.511 seconds (JVM running for 23.591)
2020-07-07 19:41:23.791|INFO |http-nio-31003-exec-4|http-nio-31003-exec-4|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-07 19:41:23.791|INFO |http-nio-31003-exec-4|http-nio-31003-exec-4|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-07 19:41:23.809|INFO |http-nio-31003-exec-4|http-nio-31003-exec-4|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 18 ms
2020-07-07 19:41:33.002|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 19:41:33.124|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-07 19:41:33.129|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-07 19:41:33.178|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-07 19:41:33.325|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 19:41:33.338|INFO |http-nio-31003-exec-10|http-nio-31003-exec-10|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@38869141
2020-07-07 19:41:34.206|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 19:45:53.984|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 19:48:39.583|ERROR|http-nio-31003-exec-3|http-nio-31003-exec-3|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet].log() 175|Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is feign.FeignException$InternalServerError: [500] during [POST] to [http://eureka-provider-demo-my/provider/getUserInfo] [UserService#getUserInfo(String)]: [{"timestamp":"2020-07-07T11:48:33.267+00:00","status":500,"error":"Internal Server Error","message":"","path":"/provider/getUserInfo"}]] with root cause
feign.FeignException$InternalServerError: [500] during [POST] to [http://eureka-provider-demo-my/provider/getUserInfo] [UserService#getUserInfo(String)]: [{"timestamp":"2020-07-07T11:48:33.267+00:00","status":500,"error":"Internal Server Error","message":"","path":"/provider/getUserInfo"}]
	at feign.FeignException.serverErrorStatus(FeignException.java:231) ~[feign-core-10.10.1.jar:?]
	at feign.FeignException.errorStatus(FeignException.java:180) ~[feign-core-10.10.1.jar:?]
	at feign.FeignException.errorStatus(FeignException.java:169) ~[feign-core-10.10.1.jar:?]
	at feign.codec.ErrorDecoder$Default.decode(ErrorDecoder.java:92) ~[feign-core-10.10.1.jar:?]
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:96) ~[feign-core-10.10.1.jar:?]
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:138) ~[feign-core-10.10.1.jar:?]
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:89) ~[feign-core-10.10.1.jar:?]
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100) ~[feign-core-10.10.1.jar:?]
	at com.sun.proxy.$Proxy102.getUserInfo(Unknown Source) ~[?:?]
	at com.adam.eureka_consumer_demo_my.web.ConsumerController.getUserInfoByFeign(ConsumerController.java:35) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_211]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_211]
2020-07-07 19:50:53.986|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 19:52:59.863|INFO |Thread-270|Thread-270|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-07 19:52:59.864|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-07 19:52:59.864|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594122779864, current=DOWN, previous=UP]
2020-07-07 19:52:59.865|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 19:52:59.873|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 19:53:00.627|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-07 19:53:00.631|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-07 19:53:00.631|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-07 19:53:00.641|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-07 19:53:03.644|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-07 19:53:03.648|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-07 19:53:03.662|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-07 19:53:24.649|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-07 19:53:26.163|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=952c617e-a053-3bdf-ae4b-784e366442c4
2020-07-07 19:53:28.126|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-07 19:53:28.863|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-07 19:53:28.912|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-07 19:53:28.912|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-07 19:53:28.912|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-07 19:53:29.413|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-07 19:53:29.413|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 4730 ms
2020-07-07 19:53:32.108|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-07 19:53:32.167|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 19:53:32.168|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 19:53:32.185|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 19:53:32.185|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 19:53:32.418|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-07 19:53:35.236|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-07 19:53:35.539|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-07 19:53:35.674|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-07 19:53:35.886|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-07 19:53:35.887|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-07 19:53:36.389|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-07 19:53:36.389|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-07 19:53:36.895|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 19:53:37.896|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-07 19:53:37.896|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-07 19:53:37.896|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-07 19:53:37.896|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-07 19:53:37.896|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-07 19:53:37.897|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-07 19:53:37.897|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-07 19:53:38.685|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-07 19:53:38.694|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-07 19:53:38.701|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-07 19:53:38.711|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594122818705 with initial instances count: 1
2020-07-07 19:53:38.712|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-07 19:53:38.714|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594122818713, current=UP, previous=STARTING]
2020-07-07 19:53:38.719|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 19:53:38.720|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-07 19:53:39.033|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 19:53:39.046|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-07 19:53:39.051|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-07 19:53:40.624|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-07 19:53:40.677|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-07 19:53:40.801|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-07 19:53:41.081|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 20.257 seconds (JVM running for 23.608)
2020-07-07 19:53:53.021|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-07 19:53:53.021|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-07 19:53:53.041|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 20 ms
2020-07-07 19:54:05.339|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 19:54:05.484|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-07 19:54:05.489|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-07 19:54:05.561|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-07 19:54:05.709|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 19:54:05.724|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@52b954f0
2020-07-07 19:55:33.021|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 19:55:33.056|ERROR|http-nio-31003-exec-1|http-nio-31003-exec-1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet].log() 175|Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is feign.FeignException$NotFound: [404] during [POST] to [http://eureka-provider-demo-my/provider/getUserInfo/00000000000000] [UserService#getUserInfo(String)]: [{"timestamp":"2020-07-07T11:54:06.433+00:00","status":404,"error":"Not Found","message":"","path":"/provider/getUserInfo/00000000000000"}]] with root cause
feign.FeignException$NotFound: [404] during [POST] to [http://eureka-provider-demo-my/provider/getUserInfo/00000000000000] [UserService#getUserInfo(String)]: [{"timestamp":"2020-07-07T11:54:06.433+00:00","status":404,"error":"Not Found","message":"","path":"/provider/getUserInfo/00000000000000"}]
	at feign.FeignException.clientErrorStatus(FeignException.java:201) ~[feign-core-10.10.1.jar:?]
	at feign.FeignException.errorStatus(FeignException.java:177) ~[feign-core-10.10.1.jar:?]
	at feign.FeignException.errorStatus(FeignException.java:169) ~[feign-core-10.10.1.jar:?]
	at feign.codec.ErrorDecoder$Default.decode(ErrorDecoder.java:92) ~[feign-core-10.10.1.jar:?]
	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:96) ~[feign-core-10.10.1.jar:?]
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:138) ~[feign-core-10.10.1.jar:?]
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:89) ~[feign-core-10.10.1.jar:?]
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100) ~[feign-core-10.10.1.jar:?]
	at com.sun.proxy.$Proxy102.getUserInfo(Unknown Source) ~[?:?]
	at com.adam.eureka_consumer_demo_my.web.ConsumerController.getUserInfoByFeign(ConsumerController.java:35) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_211]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_211]
2020-07-07 19:58:37.903|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 20:03:37.905|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 20:05:14.961|INFO |Thread-279|Thread-279|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-07 20:05:14.964|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-07 20:05:14.964|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594123514964, current=DOWN, previous=UP]
2020-07-07 20:05:14.964|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 20:05:14.971|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 20:05:15.866|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-07 20:05:15.871|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-07 20:05:15.871|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-07 20:05:15.882|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-07 20:05:18.885|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-07 20:05:18.894|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-07 20:05:18.906|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-07 20:16:56.604|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-07 20:16:58.576|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=56ccd5a4-04b6-3d97-86a1-5085f99b9d24
2020-07-07 20:17:00.487|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-07 20:17:01.875|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-07 20:17:01.928|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-07 20:17:01.929|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-07 20:17:01.929|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-07 20:17:02.227|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-07 20:17:02.228|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 5581 ms
2020-07-07 20:17:32.956|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-07 20:17:32.992|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 20:17:32.992|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 20:17:32.999|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 20:17:32.999|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 20:17:33.196|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-07 20:17:35.914|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-07 20:17:36.092|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-07 20:17:36.141|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-07 20:17:36.241|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-07 20:17:36.241|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-07 20:17:36.460|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-07 20:17:36.460|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-07 20:17:36.750|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 20:17:37.436|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-07 20:17:37.436|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-07 20:17:37.436|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-07 20:17:37.436|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-07 20:17:37.437|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-07 20:17:37.437|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-07 20:17:37.437|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-07 20:17:37.672|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-07 20:17:37.675|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-07 20:17:37.680|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-07 20:17:37.686|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594124257684 with initial instances count: 1
2020-07-07 20:17:37.689|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-07 20:17:37.690|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594124257690, current=UP, previous=STARTING]
2020-07-07 20:17:37.696|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 20:17:37.696|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-07 20:17:37.752|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-07 20:17:37.756|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-07 20:17:37.764|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 20:17:38.867|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-07 20:17:38.891|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-07 20:17:38.956|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-07 20:17:39.107|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 46.535 seconds (JVM running for 49.998)
2020-07-07 20:17:56.567|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-07 20:17:56.577|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-07 20:17:58.176|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 1594 ms
2020-07-07 20:18:19.021|ERROR|http-nio-31003-exec-1|http-nio-31003-exec-1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet].log() 175|Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.netflix.hystrix.contrib.javanica.exception.FallbackDefinitionException: fallback method wasn't found: testFallBack([class java.lang.String])] with root cause
com.netflix.hystrix.contrib.javanica.exception.FallbackDefinitionException: fallback method wasn't found: testFallBack([class java.lang.String])
	at com.netflix.hystrix.contrib.javanica.utils.MethodProvider$FallbackMethodFinder.doFind(MethodProvider.java:190) ~[hystrix-javanica-1.5.18.jar:1.5.18]
	at com.netflix.hystrix.contrib.javanica.utils.MethodProvider$FallbackMethodFinder.find(MethodProvider.java:159) ~[hystrix-javanica-1.5.18.jar:1.5.18]
	at com.netflix.hystrix.contrib.javanica.utils.MethodProvider.getFallbackMethod(MethodProvider.java:73) ~[hystrix-javanica-1.5.18.jar:1.5.18]
	at com.netflix.hystrix.contrib.javanica.utils.MethodProvider.getFallbackMethod(MethodProvider.java:59) ~[hystrix-javanica-1.5.18.jar:1.5.18]
	at com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect.setFallbackMethod(HystrixCommandAspect.java:331) ~[hystrix-javanica-1.5.18.jar:1.5.18]
	at com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect.access$300(HystrixCommandAspect.java:64) ~[hystrix-javanica-1.5.18.jar:1.5.18]
	at com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect$MetaHolderFactory.metaHolderBuilder(HystrixCommandAspect.java:176) ~[hystrix-javanica-1.5.18.jar:1.5.18]
	at com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect$CommandMetaHolderFactory.create(HystrixCommandAspect.java:258) ~[hystrix-javanica-1.5.18.jar:1.5.18]
	at com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect$MetaHolderFactory.create(HystrixCommandAspect.java:166) ~[hystrix-javanica-1.5.18.jar:1.5.18]
	at com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect.methodsAnnotatedWithHystrixCommand(HystrixCommandAspect.java:93) ~[hystrix-javanica-1.5.18.jar:1.5.18]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at com.adam.eureka_consumer_demo_my.web.ConsumerController$$EnhancerBySpringCGLIB$$1fa0606f.getUserInfoByFeign(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_211]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.35.jar:9.0.35]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_211]
2020-07-07 20:22:17.139|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-07 20:22:17.139|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594124537139, current=DOWN, previous=UP]
2020-07-07 20:22:17.139|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 20:22:17.145|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 20:22:18.146|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-07 20:22:18.180|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 20:22:18.180|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 20:22:18.189|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-07 20:22:21.190|WARN |DiscoveryClient-0|DiscoveryClient-0|com.netflix.discovery.TimedSupervisorTask.run() 90|task supervisor shutting down, can't accept the task
2020-07-07 20:22:21.192|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-07 20:22:21.197|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-07 20:22:21.209|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-07 20:22:36.013|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-07 20:22:37.631|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=56ccd5a4-04b6-3d97-86a1-5085f99b9d24
2020-07-07 20:22:41.168|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-07 20:22:42.012|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-07 20:22:42.036|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-07 20:22:42.036|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-07 20:22:42.036|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-07 20:22:42.238|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-07 20:22:42.238|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 6182 ms
2020-07-07 20:22:44.280|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-07 20:22:44.313|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 20:22:44.313|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 20:22:44.322|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-07 20:22:44.322|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-07 20:22:44.488|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-07 20:22:47.220|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-07 20:22:47.397|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-07 20:22:47.446|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-07 20:22:47.533|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-07 20:22:47.534|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-07 20:22:47.710|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-07 20:22:47.711|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-07 20:22:47.995|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-07 20:22:48.689|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-07 20:22:48.689|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-07 20:22:48.689|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-07 20:22:48.689|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-07 20:22:48.690|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-07 20:22:48.690|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-07 20:22:48.690|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-07 20:22:48.901|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-07 20:22:48.905|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-07 20:22:48.907|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-07 20:22:48.912|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594124568910 with initial instances count: 1
2020-07-07 20:22:48.916|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-07 20:22:48.917|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594124568916, current=UP, previous=STARTING]
2020-07-07 20:22:48.921|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-07 20:22:48.921|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-07 20:22:48.971|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-07 20:22:48.972|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-07 20:22:48.982|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-07 20:22:50.048|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-07 20:22:50.065|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-07 20:22:50.122|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-07 20:22:50.257|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 17.901 seconds (JVM running for 21.44)
2020-07-07 20:23:09.773|INFO |http-nio-31003-exec-2|http-nio-31003-exec-2|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-07 20:23:09.781|INFO |http-nio-31003-exec-2|http-nio-31003-exec-2|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-07 20:23:11.497|INFO |http-nio-31003-exec-2|http-nio-31003-exec-2|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 1711 ms
2020-07-07 20:23:55.601|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 20:23:55.621|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-07 20:23:55.622|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-07 20:23:55.629|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-07 20:23:55.653|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-07 20:23:55.656|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@41ce9548
2020-07-07 20:24:00.843|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:04:46.208|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-08 09:04:47.829|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=5af78a81-f8ef-31da-8718-809b16e95b28
2020-07-08 09:04:48.006|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-08 09:04:48.977|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-08 09:04:49.024|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-08 09:04:49.025|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-08 09:04:49.027|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-08 09:04:49.401|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-08 09:04:49.402|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 3155 ms
2020-07-08 09:04:51.662|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-08 09:04:51.693|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:04:51.693|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:04:51.700|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:04:51.700|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:04:51.906|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-08 09:04:54.806|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-08 09:04:55.000|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-08 09:04:55.067|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-08 09:04:55.188|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-08 09:04:55.188|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-08 09:04:55.441|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-08 09:04:55.441|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-08 09:04:55.841|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:04:56.705|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-08 09:04:56.705|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-08 09:04:56.705|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-08 09:04:56.705|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-08 09:04:56.706|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-08 09:04:56.706|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-08 09:04:56.706|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-08 09:04:56.943|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-08 09:04:56.947|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-08 09:04:56.950|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-08 09:04:56.960|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594170296958 with initial instances count: 1
2020-07-08 09:04:56.963|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-08 09:04:56.964|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594170296964, current=UP, previous=STARTING]
2020-07-08 09:04:56.968|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:04:56.969|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-08 09:04:57.018|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-08 09:04:57.020|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-08 09:04:57.029|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:04:58.215|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-08 09:04:58.234|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-08 09:04:58.293|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-08 09:04:58.437|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 16.341 seconds (JVM running for 19.787)
2020-07-08 09:06:20.256|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-08 09:06:20.256|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-08 09:06:20.281|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 25 ms
2020-07-08 09:06:46.865|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:06:46.922|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:06:46.926|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-08 09:06:46.952|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-08 09:06:47.077|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:06:47.083|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@1e86ac05
2020-07-08 09:06:53.551|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:08:25.242|INFO |Thread-265|Thread-265|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-08 09:08:25.243|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-08 09:08:25.244|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594170505243, current=DOWN, previous=UP]
2020-07-08 09:08:25.244|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:08:25.252|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:08:26.014|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-08 09:08:26.029|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:08:26.029|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-08 09:08:26.306|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-08 09:08:29.307|WARN |DiscoveryClient-0|DiscoveryClient-0|com.netflix.discovery.TimedSupervisorTask.run() 90|task supervisor shutting down, can't accept the task
2020-07-08 09:08:29.308|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-08 09:08:29.318|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-08 09:08:29.330|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-08 09:08:43.569|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-08 09:08:45.309|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=5af78a81-f8ef-31da-8718-809b16e95b28
2020-07-08 09:08:47.290|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-08 09:08:48.719|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-08 09:08:48.775|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-08 09:08:48.776|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-08 09:08:48.776|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-08 09:08:49.088|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-08 09:08:49.088|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 5480 ms
2020-07-08 09:08:52.065|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-08 09:08:52.141|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:08:52.141|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:08:52.156|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:08:52.156|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:08:52.481|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-08 09:08:55.474|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-08 09:08:55.733|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-08 09:08:55.846|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-08 09:08:56.067|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-08 09:08:56.067|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-08 09:08:56.570|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-08 09:08:56.570|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-08 09:08:57.109|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:08:57.922|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-08 09:08:57.922|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-08 09:08:57.922|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-08 09:08:57.922|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-08 09:08:57.922|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-08 09:08:57.922|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-08 09:08:57.923|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-08 09:08:58.527|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-08 09:08:58.537|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-08 09:08:58.545|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-08 09:08:58.559|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594170538550 with initial instances count: 1
2020-07-08 09:08:58.561|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-08 09:08:58.563|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594170538563, current=UP, previous=STARTING]
2020-07-08 09:08:58.569|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:08:58.571|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-08 09:08:58.692|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:08:58.717|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-08 09:08:58.720|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-08 09:08:59.850|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-08 09:08:59.894|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-08 09:09:00.025|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-08 09:09:00.316|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 20.901 seconds (JVM running for 24.413)
2020-07-08 09:09:08.033|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-08 09:09:08.033|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-08 09:09:08.051|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 17 ms
2020-07-08 09:09:36.061|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:09:36.103|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:09:36.105|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-08 09:09:36.116|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-08 09:09:36.163|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:09:36.166|INFO |hystrix-eureka-provider-demo-my-1|hystrix-eureka-provider-demo-my-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@40572643
2020-07-08 09:09:38.257|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:10:08.999|INFO |Thread-266|Thread-266|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-08 09:10:09.000|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-08 09:10:09.001|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594170609001, current=DOWN, previous=UP]
2020-07-08 09:10:09.001|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:10:09.009|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:10:09.744|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-08 09:10:09.755|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:10:09.756|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-08 09:10:09.765|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-08 09:10:12.767|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-08 09:10:12.772|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-08 09:10:12.783|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-08 09:20:15.967|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-08 09:20:17.287|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=5af78a81-f8ef-31da-8718-809b16e95b28
2020-07-08 09:20:19.085|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-08 09:20:20.259|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-08 09:20:20.328|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-08 09:20:20.328|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-08 09:20:20.329|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-08 09:20:20.621|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-08 09:20:20.621|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 4615 ms
2020-07-08 09:20:33.102|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-08 09:20:33.161|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:20:33.162|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:20:33.172|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:20:33.172|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:20:33.374|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-08 09:20:35.871|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-08 09:20:36.037|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-08 09:20:36.093|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-08 09:20:36.190|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-08 09:20:36.190|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-08 09:20:36.403|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-08 09:20:36.403|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-08 09:20:36.725|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:20:37.412|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-08 09:20:37.413|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-08 09:20:37.413|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-08 09:20:37.413|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-08 09:20:37.414|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-08 09:20:37.414|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-08 09:20:37.414|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-08 09:20:37.668|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-08 09:20:37.671|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-08 09:20:37.674|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-08 09:20:37.679|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594171237677 with initial instances count: 1
2020-07-08 09:20:37.681|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-08 09:20:37.682|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594171237682, current=UP, previous=STARTING]
2020-07-08 09:20:37.685|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:20:37.685|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-08 09:20:37.728|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-08 09:20:37.729|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-08 09:20:37.738|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:20:38.841|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-08 09:20:38.861|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-08 09:20:38.912|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-08 09:20:39.053|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 26.442 seconds (JVM running for 29.655)
2020-07-08 09:20:56.488|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-08 09:20:56.495|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-08 09:20:57.990|INFO |http-nio-31003-exec-1|http-nio-31003-exec-1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 1490 ms
2020-07-08 09:22:39.070|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-08 09:22:39.070|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594171359070, current=DOWN, previous=UP]
2020-07-08 09:22:39.070|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:22:39.078|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:22:39.935|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-08 09:22:39.952|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-08 09:22:42.954|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-08 09:22:42.962|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-08 09:22:42.978|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-08 09:26:28.714|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-08 09:26:30.601|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-07-08 09:26:30.669|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'hystrix.stream' contains invalid characters, please migrate to a valid format.
2020-07-08 09:26:30.954|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=ba40ace6-af26-36dc-9310-d55df977690d
2020-07-08 09:26:31.143|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-08 09:26:31.924|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-08 09:26:31.958|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-08 09:26:31.959|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-08 09:26:31.959|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-08 09:26:32.204|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-08 09:26:32.204|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 3458 ms
2020-07-08 09:26:32.340|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:26:32.341|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:26:32.356|INFO |main|main|com.netflix.config.DynamicPropertyFactory.getInstance() 281|DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@671d97bc
2020-07-08 09:26:35.595|INFO |main|main|org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver.<init>() 58|Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-08 09:26:35.683|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-08 09:26:35.851|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:26:35.851|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:26:36.031|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-08 09:26:37.582|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-08 09:26:37.756|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-08 09:26:37.807|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-08 09:26:37.908|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-08 09:26:37.908|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-08 09:26:38.138|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-08 09:26:38.138|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-08 09:26:38.649|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:26:39.658|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-08 09:26:39.658|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-08 09:26:39.658|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-08 09:26:39.659|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-08 09:26:39.659|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-08 09:26:39.659|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-08 09:26:39.659|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-08 09:26:39.871|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-08 09:26:39.875|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-08 09:26:39.879|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-08 09:26:39.884|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594171599882 with initial instances count: 1
2020-07-08 09:26:39.888|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-08 09:26:39.890|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594171599889, current=UP, previous=STARTING]
2020-07-08 09:26:39.894|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:26:39.894|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-08 09:26:39.950|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-08 09:26:39.954|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-08 09:26:39.966|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:26:40.992|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-08 09:26:41.007|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-08 09:26:41.048|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-08 09:26:41.161|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 16.168 seconds (JVM running for 19.4)
2020-07-08 09:26:41.624|INFO |RMI TCP Connection(3)-192.168.106.1|RMI TCP Connection(3)-192.168.106.1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-08 09:26:41.624|INFO |RMI TCP Connection(3)-192.168.106.1|RMI TCP Connection(3)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-08 09:26:41.635|INFO |RMI TCP Connection(3)-192.168.106.1|RMI TCP Connection(3)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 11 ms
2020-07-08 09:31:39.664|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:33:19.754|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:33:19.774|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:33:19.776|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-08 09:33:19.783|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-08 09:33:19.803|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:33:19.805|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@4b640b27
2020-07-08 09:33:20.788|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:36:39.666|INFO |AsyncResolver-bootstrap-executor-0|AsyncResolver-bootstrap-executor-0|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:40:15.666|INFO |Thread-445|Thread-445|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-08 09:40:15.667|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-08 09:40:15.667|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594172415667, current=DOWN, previous=UP]
2020-07-08 09:40:15.668|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:40:15.674|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:40:16.410|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-08 09:40:16.422|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:40:16.422|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-08 09:40:16.435|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-08 09:40:19.439|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-08 09:40:19.445|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-08 09:40:19.458|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-08 09:40:31.542|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-08 09:40:33.430|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-07-08 09:40:33.457|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'hystrix.stream' contains invalid characters, please migrate to a valid format.
2020-07-08 09:40:33.674|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=ba40ace6-af26-36dc-9310-d55df977690d
2020-07-08 09:40:33.867|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-08 09:40:34.784|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-08 09:40:34.818|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-08 09:40:34.819|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-08 09:40:34.820|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-08 09:40:35.151|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-08 09:40:35.151|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 3569 ms
2020-07-08 09:40:35.354|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:40:35.356|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:40:35.387|INFO |main|main|com.netflix.config.DynamicPropertyFactory.getInstance() 281|DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@368424db
2020-07-08 09:40:38.869|INFO |main|main|org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver.<init>() 58|Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-08 09:40:38.952|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-08 09:40:39.123|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:40:39.123|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:40:39.282|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-08 09:40:40.840|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-08 09:40:41.032|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-08 09:40:41.094|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-08 09:40:41.284|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-08 09:40:41.285|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-08 09:40:41.527|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-08 09:40:41.527|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-08 09:40:41.903|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:40:42.716|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-08 09:40:42.716|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-08 09:40:42.716|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-08 09:40:42.717|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-08 09:40:42.717|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-08 09:40:42.717|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-08 09:40:42.717|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-08 09:40:42.979|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-08 09:40:42.983|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-08 09:40:42.986|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-08 09:40:42.993|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594172442991 with initial instances count: 1
2020-07-08 09:40:42.995|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-08 09:40:42.996|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594172442996, current=UP, previous=STARTING]
2020-07-08 09:40:42.999|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-08 09:40:42.999|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:40:43.042|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-08 09:40:43.044|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-08 09:40:43.053|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:40:44.085|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-08 09:40:44.101|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-08 09:40:44.149|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-08 09:40:44.277|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 17.112 seconds (JVM running for 21.063)
2020-07-08 09:40:44.837|INFO |RMI TCP Connection(7)-192.168.106.1|RMI TCP Connection(7)-192.168.106.1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-08 09:40:44.837|INFO |RMI TCP Connection(7)-192.168.106.1|RMI TCP Connection(7)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-08 09:40:44.852|INFO |RMI TCP Connection(7)-192.168.106.1|RMI TCP Connection(7)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 14 ms
2020-07-08 09:42:24.442|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:42:24.460|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:42:24.461|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-08 09:42:24.467|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-08 09:42:24.485|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:42:24.487|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@3cd0dcc5
2020-07-08 09:42:25.472|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:43:20.646|INFO |Thread-442|Thread-442|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-08 09:43:20.647|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-08 09:43:20.647|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594172600647, current=DOWN, previous=UP]
2020-07-08 09:43:20.648|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:43:20.654|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:43:21.691|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-08 09:43:21.705|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:43:21.705|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-08 09:43:21.716|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-08 09:43:24.717|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-08 09:43:24.728|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-08 09:43:24.738|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-08 09:44:00.272|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-08 09:44:02.624|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-07-08 09:44:02.651|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'hystrix.stream' contains invalid characters, please migrate to a valid format.
2020-07-08 09:44:02.869|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=ba40ace6-af26-36dc-9310-d55df977690d
2020-07-08 09:44:03.039|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-08 09:44:04.049|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-08 09:44:04.076|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-08 09:44:04.077|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-08 09:44:04.077|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-08 09:44:04.332|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-08 09:44:04.332|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 3969 ms
2020-07-08 09:44:04.518|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:44:04.518|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:44:04.533|INFO |main|main|com.netflix.config.DynamicPropertyFactory.getInstance() 281|DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@5896cb9c
2020-07-08 09:44:08.238|INFO |main|main|org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver.<init>() 58|Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-08 09:44:08.412|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-08 09:44:08.694|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:44:08.694|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:44:08.976|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-08 09:44:11.005|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-08 09:44:11.297|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-08 09:44:11.354|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-08 09:44:11.518|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-08 09:44:11.518|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-08 09:44:11.972|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-08 09:44:11.972|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-08 09:44:12.676|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:44:13.738|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-08 09:44:13.738|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-08 09:44:13.739|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-08 09:44:13.739|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-08 09:44:13.739|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-08 09:44:13.739|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-08 09:44:13.740|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-08 09:44:14.214|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-08 09:44:14.221|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-08 09:44:14.230|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-08 09:44:14.238|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594172654235 with initial instances count: 1
2020-07-08 09:44:14.244|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-08 09:44:14.245|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594172654245, current=UP, previous=STARTING]
2020-07-08 09:44:14.249|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:44:14.249|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-08 09:44:14.298|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-08 09:44:14.300|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-08 09:44:14.303|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:44:15.544|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-08 09:44:15.570|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-08 09:44:15.652|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-08 09:44:15.785|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 20.032 seconds (JVM running for 24.374)
2020-07-08 09:44:19.440|INFO |RMI TCP Connection(11)-192.168.106.1|RMI TCP Connection(11)-192.168.106.1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-08 09:44:19.440|INFO |RMI TCP Connection(11)-192.168.106.1|RMI TCP Connection(11)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-08 09:44:19.457|INFO |RMI TCP Connection(11)-192.168.106.1|RMI TCP Connection(11)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 16 ms
2020-07-08 09:45:49.449|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-08 09:45:49.450|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594172749449, current=DOWN, previous=UP]
2020-07-08 09:45:49.450|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:45:49.456|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:45:50.418|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-08 09:45:50.437|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-08 09:45:53.441|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-08 09:45:53.447|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-08 09:45:53.456|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-08 09:46:56.007|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-08 09:46:57.689|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-07-08 09:46:57.715|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'hystrix.stream' contains invalid characters, please migrate to a valid format.
2020-07-08 09:46:57.914|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=ba40ace6-af26-36dc-9310-d55df977690d
2020-07-08 09:46:58.107|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-08 09:46:59.088|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-08 09:46:59.119|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-08 09:46:59.121|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-08 09:46:59.121|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-08 09:46:59.405|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-08 09:46:59.406|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 3358 ms
2020-07-08 09:46:59.600|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:46:59.601|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:46:59.625|INFO |main|main|com.netflix.config.DynamicPropertyFactory.getInstance() 281|DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@69ba3f4e
2020-07-08 09:47:02.793|INFO |main|main|org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver.<init>() 58|Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-08 09:47:02.909|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-08 09:47:03.113|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:47:03.113|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:47:03.358|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-08 09:47:05.077|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-08 09:47:05.237|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-08 09:47:05.284|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-08 09:47:05.380|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-08 09:47:05.381|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-08 09:47:05.571|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-08 09:47:05.571|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-08 09:47:05.883|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:47:06.617|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-08 09:47:06.617|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-08 09:47:06.618|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-08 09:47:06.618|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-08 09:47:06.618|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-08 09:47:06.618|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-08 09:47:06.618|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-08 09:47:06.910|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-08 09:47:06.917|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-08 09:47:06.921|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-08 09:47:06.928|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594172826926 with initial instances count: 1
2020-07-08 09:47:06.932|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-08 09:47:06.933|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594172826933, current=UP, previous=STARTING]
2020-07-08 09:47:06.937|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-08 09:47:06.937|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:47:06.986|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-08 09:47:06.989|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-08 09:47:06.991|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:47:08.193|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-08 09:47:08.218|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-08 09:47:08.286|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-08 09:47:08.451|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 16.506 seconds (JVM running for 20.049)
2020-07-08 09:47:11.032|INFO |RMI TCP Connection(11)-192.168.106.1|RMI TCP Connection(11)-192.168.106.1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-08 09:47:11.032|INFO |RMI TCP Connection(11)-192.168.106.1|RMI TCP Connection(11)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-08 09:47:11.043|INFO |RMI TCP Connection(11)-192.168.106.1|RMI TCP Connection(11)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 10 ms
2020-07-08 09:47:23.659|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:47:23.678|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:47:23.679|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-08 09:47:23.687|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-08 09:47:23.709|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:47:23.716|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@409dcb2a
2020-07-08 09:47:24.691|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:49:22.027|INFO |Thread-437|Thread-437|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-08 09:49:22.028|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-08 09:49:22.028|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594172962028, current=DOWN, previous=UP]
2020-07-08 09:49:22.028|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:49:22.040|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:49:22.953|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-08 09:49:22.966|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:49:22.966|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-08 09:49:22.975|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-08 09:49:25.979|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-08 09:49:25.988|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-08 09:49:26.004|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-08 09:49:40.394|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-08 09:49:42.412|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-07-08 09:49:42.441|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'hystrix.stream' contains invalid characters, please migrate to a valid format.
2020-07-08 09:49:42.663|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=ba40ace6-af26-36dc-9310-d55df977690d
2020-07-08 09:49:42.831|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-08 09:49:43.604|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-08 09:49:43.629|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-08 09:49:43.630|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-08 09:49:43.630|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-08 09:49:43.841|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-08 09:49:43.841|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 3406 ms
2020-07-08 09:49:43.998|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:49:43.999|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:49:44.015|INFO |main|main|com.netflix.config.DynamicPropertyFactory.getInstance() 281|DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@1d944fc0
2020-07-08 09:49:47.470|INFO |main|main|org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver.<init>() 58|Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-08 09:49:47.583|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-08 09:49:47.724|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:49:47.724|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:49:47.903|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-08 09:49:49.320|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-08 09:49:49.480|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-08 09:49:49.531|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-08 09:49:49.636|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-08 09:49:49.637|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-08 09:49:49.822|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-08 09:49:49.822|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-08 09:49:50.181|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:49:51.031|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-08 09:49:51.032|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-08 09:49:51.032|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-08 09:49:51.032|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-08 09:49:51.032|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-08 09:49:51.033|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-08 09:49:51.033|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-08 09:49:51.327|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-08 09:49:51.332|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-08 09:49:51.338|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-08 09:49:51.345|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594172991343 with initial instances count: 1
2020-07-08 09:49:51.347|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-08 09:49:51.348|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594172991348, current=UP, previous=STARTING]
2020-07-08 09:49:51.351|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:49:51.352|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-08 09:49:51.399|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-08 09:49:51.401|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-08 09:49:51.411|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:49:52.528|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-08 09:49:52.546|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-08 09:49:52.595|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-08 09:49:52.719|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 15.837 seconds (JVM running for 19.635)
2020-07-08 09:49:53.987|INFO |RMI TCP Connection(7)-192.168.106.1|RMI TCP Connection(7)-192.168.106.1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-08 09:49:53.987|INFO |RMI TCP Connection(7)-192.168.106.1|RMI TCP Connection(7)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-08 09:49:54.002|INFO |RMI TCP Connection(7)-192.168.106.1|RMI TCP Connection(7)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 14 ms
2020-07-08 09:50:08.575|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:50:08.595|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:50:08.596|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-08 09:50:08.605|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-08 09:50:08.628|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:50:08.631|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@4cd94ef4
2020-07-08 09:50:09.611|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:50:37.016|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-08 09:50:37.016|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594173037016, current=DOWN, previous=UP]
2020-07-08 09:50:37.017|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:50:37.018|INFO |Thread-440|Thread-440|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-08 09:50:37.024|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:50:37.921|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-08 09:50:37.932|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:50:37.932|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-08 09:50:37.948|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-08 09:50:40.950|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-08 09:50:40.960|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-08 09:50:40.971|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
2020-07-08 09:51:09.509|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStartupProfileInfo() 651|No active profile set, falling back to default profiles: default
2020-07-08 09:51:11.599|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2020-07-08 09:51:11.624|WARN |main|main|org.springframework.boot.actuate.endpoint.EndpointId.logWarning() 155|Endpoint ID 'hystrix.stream' contains invalid characters, please migrate to a valid format.
2020-07-08 09:51:11.815|INFO |main|main|org.springframework.cloud.context.scope.GenericScope.setSerializationId() 295|BeanFactory id=ba40ace6-af26-36dc-9310-d55df977690d
2020-07-08 09:51:11.978|INFO |main|main|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization() 335|Bean 'com.adam.eureka_consumer_demo_my.service.UserService' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-08 09:51:12.826|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize() 108|Tomcat initialized with port(s): 31003 (http)
2020-07-08 09:51:12.854|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Initializing ProtocolHandler ["http-nio-31003"]
2020-07-08 09:51:12.855|INFO |main|main|org.apache.catalina.core.StandardService.log() 173|Starting service [Tomcat]
2020-07-08 09:51:12.855|INFO |main|main|org.apache.catalina.core.StandardEngine.log() 173|Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-07-08 09:51:13.069|INFO |main|main|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring embedded WebApplicationContext
2020-07-08 09:51:13.069|INFO |main|main|org.springframework.web.context.ContextLoader.prepareWebApplicationContext() 284|Root WebApplicationContext: initialization completed in 3515 ms
2020-07-08 09:51:13.224|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:51:13.225|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:51:13.241|INFO |main|main|com.netflix.config.DynamicPropertyFactory.getInstance() 281|DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@3866c96e
2020-07-08 09:51:16.691|INFO |main|main|org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver.<init>() 58|Exposing 2 endpoint(s) beneath base path '/actuator'
2020-07-08 09:51:16.799|INFO |main|main|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods() 69|Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-07-08 09:51:16.947|WARN |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 121|No URLs will be polled as dynamic configuration sources.
2020-07-08 09:51:16.947|INFO |main|main|com.netflix.config.sources.URLConfigurationSource.<init>() 122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-07-08 09:51:17.117|INFO |main|main|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.initialize() 181|Initializing ExecutorService 'applicationTaskExecutor'
2020-07-08 09:51:18.533|WARN |main|main|org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger.logWarning() 86|You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-07-08 09:51:18.697|INFO |main|main|org.springframework.cloud.netflix.eureka.InstanceInfoFactory.create() 72|Setting initial instance status as: STARTING
2020-07-08 09:51:18.747|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 371|Initializing Eureka in region us-east-1
2020-07-08 09:51:18.839|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 70|Using JSON encoding codec LegacyJacksonJson
2020-07-08 09:51:18.839|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 71|Using JSON decoding codec LegacyJacksonJson
2020-07-08 09:51:19.058|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 80|Using XML encoding codec XStreamXml
2020-07-08 09:51:19.058|INFO |main|main|com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>() 81|Using XML decoding codec XStreamXml
2020-07-08 09:51:19.409|INFO |main|main|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver.getClusterEndpoints() 43|Resolving eureka endpoints via configuration
2020-07-08 09:51:20.266|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 988|Disable delta property : false
2020-07-08 09:51:20.266|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 989|Single vip registry refresh property : null
2020-07-08 09:51:20.266|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 990|Force full registry fetch : false
2020-07-08 09:51:20.267|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 991|Application is null : false
2020-07-08 09:51:20.267|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 992|Registered Applications size is zero : true
2020-07-08 09:51:20.267|INFO |main|main|com.netflix.discovery.DiscoveryClient.fetchRegistry() 994|Application version is -1: true
2020-07-08 09:51:20.267|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1077|Getting all instance registry info from the eureka server
2020-07-08 09:51:20.553|INFO |main|main|com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry() 1086|The response status is 200
2020-07-08 09:51:20.557|INFO |main|main|com.netflix.discovery.DiscoveryClient.initScheduledTasks() 1301|Starting heartbeat executor: renew interval is: 30
2020-07-08 09:51:20.562|INFO |main|main|com.netflix.discovery.InstanceInfoReplicator.<init>() 60|InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-07-08 09:51:20.567|INFO |main|main|com.netflix.discovery.DiscoveryClient.<init>() 475|Discovery Client initialized at timestamp 1594173080565 with initial instances count: 1
2020-07-08 09:51:20.570|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register() 41|Registering application EUREKA-CONSUMER-DEMO-MY with eureka with status UP
2020-07-08 09:51:20.571|INFO |main|main|com.netflix.discovery.DiscoveryClient.notify() 1337|Saw local status change event StatusChangeEvent [timestamp=1594173080571, current=UP, previous=STARTING]
2020-07-08 09:51:20.575|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:51:20.575|INFO |main|main|org.apache.coyote.http11.Http11NioProtocol.log() 173|Starting ProtocolHandler ["http-nio-31003"]
2020-07-08 09:51:20.625|INFO |main|main|org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start() 220|Tomcat started on port(s): 31003 (http) with context path ''
2020-07-08 09:51:20.626|INFO |main|main|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent() 145|Updating port to 31003
2020-07-08 09:51:20.642|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:51:21.703|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 147|Context refreshed
2020-07-08 09:51:21.722|INFO |main|main|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start() 150|Found 1 custom documentation plugin(s)
2020-07-08 09:51:21.789|INFO |main|main|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan() 41|Scanning for api listing references
2020-07-08 09:51:21.956|INFO |main|main|com.adam.eureka_consumer_demo_my.EurekaConsumerDemoMyApplication.logStarted() 61|Started EurekaConsumerDemoMyApplication in 16.073 seconds (JVM running for 19.837)
2020-07-08 09:51:23.052|INFO |RMI TCP Connection(7)-192.168.106.1|RMI TCP Connection(7)-192.168.106.1|org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log() 173|Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-08 09:51:23.052|INFO |RMI TCP Connection(7)-192.168.106.1|RMI TCP Connection(7)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 525|Initializing Servlet 'dispatcherServlet'
2020-07-08 09:51:23.066|INFO |RMI TCP Connection(7)-192.168.106.1|RMI TCP Connection(7)-192.168.106.1|org.springframework.web.servlet.DispatcherServlet.initServletBean() 547|Completed initialization in 14 ms
2020-07-08 09:51:34.823|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:51:34.841|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.util.concurrent.ShutdownEnabledTimer.<init>() 58|Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:51:34.843|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.BaseLoadBalancer.initWithConfig() 197|Client: eureka-provider-demo-my instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-07-08 09:51:34.850|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.enableAndInitLearnNewServersFeature() 222|Using serverListUpdater PollingServerListUpdater
2020-07-08 09:51:34.869|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:51:34.879|INFO |hystrix-ConsumerController-1|hystrix-ConsumerController-1|com.netflix.loadbalancer.DynamicServerListLoadBalancer.restOfInit() 150|DynamicServerListLoadBalancer for client eureka-provider-demo-my initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-provider-demo-my,current list of Servers=[127.0.0.1:31002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:127.0.0.1:31002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@6704ba1f
2020-07-08 09:51:35.854|INFO |PollingServerListUpdater-0|PollingServerListUpdater-0|com.netflix.config.ChainedDynamicProperty.checkAndFlip() 115|Flipping property: eureka-provider-demo-my.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-07-08 09:55:36.745|WARN |DiscoveryClient-0|DiscoveryClient-0|com.netflix.discovery.TimedSupervisorTask.run() 73|task supervisor timed out
java.util.concurrent.TimeoutException: null
	at java.util.concurrent.FutureTask.get(FutureTask.java:205) ~[?:1.8.0_211]
	at com.netflix.discovery.TimedSupervisorTask.run(TimedSupervisorTask.java:68) ~[eureka-client-1.9.21.jar:1.9.21]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_211]
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266) ~[?:1.8.0_211]
	at java.util.concurrent.FutureTask.run(FutureTask.java) ~[?:1.8.0_211]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_211]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_211]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_211]
2020-07-08 09:55:36.743|WARN |DiscoveryClient-1|DiscoveryClient-1|com.netflix.discovery.TimedSupervisorTask.run() 73|task supervisor timed out
java.util.concurrent.TimeoutException: null
	at java.util.concurrent.FutureTask.get(FutureTask.java:205) ~[?:1.8.0_211]
	at com.netflix.discovery.TimedSupervisorTask.run(TimedSupervisorTask.java:68) ~[eureka-client-1.9.21.jar:1.9.21]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_211]
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266) ~[?:1.8.0_211]
	at java.util.concurrent.FutureTask.run(FutureTask.java) ~[?:1.8.0_211]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_211]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_211]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_211]
2020-07-08 09:55:39.247|ERROR|DiscoveryClient-CacheRefreshExecutor-0|DiscoveryClient-CacheRefreshExecutor-0|com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute() 91|Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:50101/eureka/}
javax.ws.rs.WebApplicationException: com.fasterxml.jackson.core.JsonParseException: processing aborted
 at [Source: (GZIPInputStream); line: 1, column: 18]
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:200) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getDelta(AbstractJerseyEurekaHttpClient.java:172) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$7.execute(EurekaHttpClientDecorator.java:152) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getDelta(EurekaHttpClientDecorator.java:149) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$7.execute(EurekaHttpClientDecorator.java:152) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:89) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getDelta(EurekaHttpClientDecorator.java:149) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$7.execute(EurekaHttpClientDecorator.java:152) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getDelta(EurekaHttpClientDecorator.java:149) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$7.execute(EurekaHttpClientDecorator.java:152) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getDelta(EurekaHttpClientDecorator.java:149) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient.getAndUpdateDelta(DiscoveryClient.java:1115) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:997) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient.refreshRegistry(DiscoveryClient.java:1517) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1484) ~[eureka-client-1.9.21.jar:1.9.21]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_211]
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266) ~[?:1.8.0_211]
	at java.util.concurrent.FutureTask.run(FutureTask.java) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_211]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_211]
Caused by: com.fasterxml.jackson.core.JsonParseException: processing aborted
 at [Source: (GZIPInputStream); line: 1, column: 18]
	at com.netflix.discovery.converters.EurekaJacksonCodec$ApplicationsDeserializer.deserialize(EurekaJacksonCodec.java:805) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.converters.EurekaJacksonCodec$ApplicationsDeserializer.deserialize(EurekaJacksonCodec.java:791) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.fasterxml.jackson.databind.ObjectReader._unwrapAndDeserialize(ObjectReader.java:2196) ~[jackson-databind-2.11.0.jar:2.11.0]
	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2054) ~[jackson-databind-2.11.0.jar:2.11.0]
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1431) ~[jackson-databind-2.11.0.jar:2.11.0]
	at com.netflix.discovery.converters.EurekaJacksonCodec.readValue(EurekaJacksonCodec.java:213) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.converters.wrappers.CodecWrappers$LegacyJacksonJson.decode(CodecWrappers.java:314) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:103) ~[eureka-client-1.9.21.jar:1.9.21]
	... 26 more
2020-07-08 09:55:39.276|WARN |DiscoveryClient-CacheRefreshExecutor-0|DiscoveryClient-CacheRefreshExecutor-0|com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute() 130|Request execution failed with message: com.fasterxml.jackson.core.JsonParseException: processing aborted
 at [Source: (GZIPInputStream); line: 1, column: 18]
2020-07-08 09:55:40.102|ERROR|DiscoveryClient-CacheRefreshExecutor-0|DiscoveryClient-CacheRefreshExecutor-0|com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute() 83|Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:50101/eureka/}
javax.ws.rs.WebApplicationException: com.fasterxml.jackson.core.JsonParseException: processing aborted
 at [Source: (GZIPInputStream); line: 1, column: 18]
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:200) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getDelta(AbstractJerseyEurekaHttpClient.java:172) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$7.execute(EurekaHttpClientDecorator.java:152) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getDelta(EurekaHttpClientDecorator.java:149) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$7.execute(EurekaHttpClientDecorator.java:152) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getDelta(EurekaHttpClientDecorator.java:149) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$7.execute(EurekaHttpClientDecorator.java:152) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getDelta(EurekaHttpClientDecorator.java:149) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$7.execute(EurekaHttpClientDecorator.java:152) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getDelta(EurekaHttpClientDecorator.java:149) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient.getAndUpdateDelta(DiscoveryClient.java:1115) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:997) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient.refreshRegistry(DiscoveryClient.java:1517) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1484) ~[eureka-client-1.9.21.jar:1.9.21]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_211]
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266) ~[?:1.8.0_211]
	at java.util.concurrent.FutureTask.run(FutureTask.java) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_211]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_211]
Caused by: com.fasterxml.jackson.core.JsonParseException: processing aborted
 at [Source: (GZIPInputStream); line: 1, column: 18]
	at com.netflix.discovery.converters.EurekaJacksonCodec$ApplicationsDeserializer.deserialize(EurekaJacksonCodec.java:805) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.converters.EurekaJacksonCodec$ApplicationsDeserializer.deserialize(EurekaJacksonCodec.java:791) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.fasterxml.jackson.databind.ObjectReader._unwrapAndDeserialize(ObjectReader.java:2196) ~[jackson-databind-2.11.0.jar:2.11.0]
	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2054) ~[jackson-databind-2.11.0.jar:2.11.0]
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1431) ~[jackson-databind-2.11.0.jar:2.11.0]
	at com.netflix.discovery.converters.EurekaJacksonCodec.readValue(EurekaJacksonCodec.java:213) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.converters.wrappers.CodecWrappers$LegacyJacksonJson.decode(CodecWrappers.java:314) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:103) ~[eureka-client-1.9.21.jar:1.9.21]
	... 27 more
2020-07-08 09:55:40.120|WARN |DiscoveryClient-CacheRefreshExecutor-0|DiscoveryClient-CacheRefreshExecutor-0|com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute() 130|Request execution failed with message: com.fasterxml.jackson.core.JsonParseException: processing aborted
 at [Source: (GZIPInputStream); line: 1, column: 18]
2020-07-08 09:55:40.335|ERROR|DiscoveryClient-CacheRefreshExecutor-0|DiscoveryClient-CacheRefreshExecutor-0|com.netflix.discovery.DiscoveryClient.fetchRegistry() 1002|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getDelta(EurekaHttpClientDecorator.java:149) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$7.execute(EurekaHttpClientDecorator.java:152) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getDelta(EurekaHttpClientDecorator.java:149) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient.getAndUpdateDelta(DiscoveryClient.java:1115) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:997) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient.refreshRegistry(DiscoveryClient.java:1517) ~[eureka-client-1.9.21.jar:1.9.21]
	at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1484) ~[eureka-client-1.9.21.jar:1.9.21]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_211]
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266) ~[?:1.8.0_211]
	at java.util.concurrent.FutureTask.run(FutureTask.java) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_211]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_211]
2020-07-08 09:55:58.466|INFO |Thread-440|Thread-440|com.netflix.loadbalancer.PollingServerListUpdater.run() 53|Shutting down the Executor Pool for PollingServerListUpdater
2020-07-08 09:55:58.467|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister() 65|Unregistering application EUREKA-CONSUMER-DEMO-MY with eureka with status DOWN
2020-07-08 09:55:58.467|WARN |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.notify() 1335|Saw local status change event StatusChangeEvent [timestamp=1594173358467, current=DOWN, previous=UP]
2020-07-08 09:55:58.468|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 854|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103: registering service...
2020-07-08 09:55:58.475|INFO |DiscoveryClient-InstanceInfoReplicator-0|DiscoveryClient-InstanceInfoReplicator-0|com.netflix.discovery.DiscoveryClient.register() 863|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - registration status: 204
2020-07-08 09:55:59.473|INFO |SpringContextShutdownHook|SpringContextShutdownHook|org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.shutdown() 218|Shutting down ExecutorService 'applicationTaskExecutor'
2020-07-08 09:55:59.490|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 67|Shutdown hook removed for: NFLoadBalancer-PingTimer-eureka-provider-demo-my
2020-07-08 09:55:59.490|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.util.concurrent.ShutdownEnabledTimer.cancel() 72|Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_211]
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_211]
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70) ~[netflix-commons-util-0.3.0.jar:0.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285) ~[ribbon-loadbalancer-2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_211]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_211]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_211]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_211]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92) ~[spring-cloud-context-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:579) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:551) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1091) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:512) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1084) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:168) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE]
2020-07-08 09:55:59.500|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 916|Shutting down DiscoveryClient ...
2020-07-08 09:56:02.504|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 952|Unregistering ...
2020-07-08 09:56:02.511|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.unregister() 954|DiscoveryClient_EUREKA-CONSUMER-DEMO-MY/eureka-consumer-demo-my:50103 - deregister  status: 200
2020-07-08 09:56:02.521|INFO |SpringContextShutdownHook|SpringContextShutdownHook|com.netflix.discovery.DiscoveryClient.shutdown() 941|Completed shut down of DiscoveryClient
